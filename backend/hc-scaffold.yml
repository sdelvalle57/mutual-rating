{
  # हे एक holochain scaffold च्या yaml व्याख्या आहे. http://ceptr.org/projects/holochain

  # डीएनए फाइल आवृत्ती
  # डीएनएमधील बदलांसाठी आवृत्ती सूचक
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+e8a394b",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # डीएनए फाइल आवृत्ती
    # डीएनएमधील बदलांसाठी आवृत्ती सूचक
    "Version": 1,

    # डीएनए युनिक ID
    # हा ID आपल्या अॅपला इतरांपेक्षा वेगळा करतो. उदाहरणार्थ, त्याच कोडच्या दुसर्या एका स्लेक कार्यसंघाला सांगा.
    "UUID": "95654f55-cf94-467a-877e-a3fe7eb41042",

    # अनुप्रयोग नाव
    # आपण आपल्या हॉलोचैन अॅपला काय म्हणू इच्छिता?
    "Name": "Mutual rating on Go version",

    # गुणधर्म
    # आपण सर्व झॉम्स वर उपलब्ध असलेले गुणधर्म.
    "Properties": {

      # अनुप्रयोग वर्णन
      # आपल्या हॉलोचैन अॅप्सचे थोडक्यात वर्णन करा.
      "description": "Mutual rating on Go version with React Redux frontend",

      # भाषा
      # या होलोहोइन अॅप्पचा आधार (मानवी) भाषा.
      "language": "mr"
    },

    # गुणधर्म स्कीमा फाइल
    # आपल्या डीएनए फाइलमधील प्रॉपर्टी सेक्शन मधील नोंदींचे वर्णन करा.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT सेटिंग्ज
    # आपल्या वितरीत हॅश सारणीची गुणधर्म कॉन्फिगर करा (उदा. हॅश अल्गोरिदम, अतिपरिचित आकार इ.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # झॉम्स
    # आपल्या अॅप्लिकेशनचे समर्थन करणार्या झॉम्स ची सूची करा.
    "Zomes": [
      {

        # झूम नाव
        # या कोड मॉड्यूलचे नाव.
        "Name": "users",

        # झूम वर्णन
        # या मॉड्यूलचे काय कारण आहे??
        "Description": "Manage users",

        # केंद्रक प्रकार
        # आपण कोणत्या स्क्रिप्टिंग भाषेत कोड करू शकाल?
        "RibosomeType": "js",

        # कोड फाइल
        # या झमेसाठी मुख्य स्क्रिप्ट फाइलसाठी पॉइंट्स.
        "CodeFile": "users.js",

        # झूम प्रविष्ट
        # आपल्या झमेद्वारे डेटा संचयित आणि मागोवा घेतला जातो.
        "Entries": [
          {
            "Name": "user", # या प्रविष्टीचे नाव.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # हा एंट्री स्टोअर कोणत्या प्रकारचा डेटा असणे आवश्यक आहे?
            "Sharing": "public", # ही नोंदणी सार्वजनिकरित्या प्रवेशयोग्य असावी का?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"name\",\n    \"email\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"$id\": \"#/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"PJ\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"email\": {\n      \"$id\": \"#/properties/email\",\n      \"type\": \"string\",\n      \"title\": \"The Email Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"pj@email.com\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  }\n}",
            "_": "cr"
          }
        ],

        # झूम कार्ये
        # आपल्या झमेच्या API मध्ये कार्य करू शकणारे कार्य.
        "Functions": [
          {
            "Name": "userCreate", # या कार्याचे नाव.
            "CallingType": "json", # या फंक्शनला पाठविलेल्या पॅरामिटर्ससाठी डेटा स्वरूप.
            "Exposure": "public", # या फंक्शनचा स्तर उघड झाला आहे.
            "_": "c:user"
          },
          {
            "Name": "userRead", # या कार्याचे नाव.
            "CallingType": "json", # या फंक्शनला पाठविलेल्या पॅरामिटर्ससाठी डेटा स्वरूप.
            "Exposure": "public", # या फंक्शनचा स्तर उघड झाला आहे.
            "_": "r:user"
          },
          {
            "Name": "getAllUsers", # या कार्याचे नाव.
            "CallingType": "json", # या फंक्शनला पाठविलेल्या पॅरामिटर्ससाठी डेटा स्वरूप.
            "Exposure": "public", # या फंक्शनचा स्तर उघड झाला आहे.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction userCreate (userEntry) {\n  var userHash = commit(\"user\", userEntry);\n  return userHash;\n}\n\nfunction userRead (userHash) {\n  var user = get(userHash);\n  return user;\n}\n\nfunction getAllUsers (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Empty test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "users",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userCreate",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "userCreate",

            # Input
            # Input sent to the function
            "Input": {
              "name": "PJ",
              "email": "pj@email.com"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userRead",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "userRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "name": "PJ",
              "email": "pj@email.com"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for getAllUsers",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "getAllUsers",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    }
  ]
}